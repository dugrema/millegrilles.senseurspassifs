#!/usr/bin/env node

const debug = require('debug')('millegrilles:coupdoeil:www')
const express = require('express')

const amqpdao = require('../models/amqpdao')
const {initialiser: initialiserServer} = require('millegrilles.common/lib/server2')
const {initialiser: initialiserSenseursPassifs} = require('../routes/senseurspassifs')

async function init() {

  // Connexion AMQ
  const {amqpdao: instAmqpdao} = await amqpdao.init()
  const idmg = instAmqpdao.pki.idmg

  function stubDev(req, res, next) {
    req.mq = instAmqpdao
    req.idmg = idmg
    if(!req.session) req.session = {}
    req.session.estProprietaire = true
    next()
  }

  debug("Initialisation serveur IDMG : %s", idmg)

  // Creer une collection avec la connexion a MQ (format qui supporte hebergement)
  const rabbitMQParIdmg = {
    [idmg]: instAmqpdao
  }
  const mqList = [instAmqpdao]

  const fctRabbitMQParIdmg = (idmg) => {
    return rabbitMQParIdmg[idmg]
  }

  // Initalier les apps individuelles, mapper dans dict (cle est path relatif)
  const senseurspassifs = await initialiserSenseursPassifs(fctRabbitMQParIdmg, {idmg})
  const devRoute = devRouteStub(fctRabbitMQParIdmg, {idmg})
  const mappingApps = {devRoute, senseurspassifs}

  const root = express()
  root.use(stubDev)
  const serverInstance = initialiserServer(root, mappingApps, {pathSocketio: 'senseurspassifs', mqList})

}

function devRouteStub(fctRabbitMQParIdmg, opts) {
  const routeTest = express()
  // Aucune fonctionnalite n'est disponible via REST, tout est sur socket.io
  routeTest.get('/index.html', (req, res)=>{res.end("Allo")})
  routeTest.use(function(req, res, next) {res.sendStatus(404)});

  // Ajouter parametres pour Socket.IO
  const socketio = {addSocket: devAddSocket}

  return {route: routeTest, socketio}
}

// Fonction qui permet d'activer Socket.IO pour l'application
function devAddSocket(socket) {
  debug("devAddSocket, ID %s", socket.id)
  socket.estProprietaire = true
  socket.modeProtege = true
}

init()
